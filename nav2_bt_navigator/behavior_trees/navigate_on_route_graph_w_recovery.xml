
<!--
  This Behavior Tree uses the route server to route the robot through a space
  and sends the dense path to a controller to follow precisely (pre-smoothing) when
  the route is invalid or the goal is updated only.

  It will also do first and last mile navigation to the start and end node of the route.
  While this uses freespace poses, the ComputeRoute will also accept already known NodeIDs
  if using the route server with known start and target node's locations and not going off graph.
  It also has recovery actions specific to planning / control as well as general system issues.
-->

<root BTCPP_format="4" main_tree_to_execute="MainTree">
  <BehaviorTree ID="MainTree">
    <RecoveryNode number_of_retries="6" name="NavigateRecovery">
      <PipelineSequence name="NavigateWithReplanning">
        <ControllerSelector selected_controller="{selected_controller}" default_controller="FollowPath" topic_name="controller_selector"/>
        <PlannerSelector selected_planner="{selected_planner}" default_planner="GridBased" topic_name="planner_selector"/>
        <RecoveryNode number_of_retries="1" name="ComputeRoute">
          <RateController hz="0.5" name="ComputeRouteRateController">
              <Fallback>
                <!-- Compute a new route if a new goal is found or the path is no longer valid -->
                <ReactiveSequence>
                  <Inverter>
                    <GlobalUpdatedGoal/>
                  </Inverter>
                  <IsPathValid path="{path}"/> <!-- Base it on the complete connected 'path', not simply the 'route_path' -->
                </ReactiveSequence>
                <Sequence name="ComputeAndSmoothRoute">
                  <!-- Compute the route -->
                  <ComputeRoute goal="{goal}" path="{route_path}" route="{route}" use_poses="true" error_code_id="{compute_route_error_code}" error_msg="{compute_route_error_msg}"/>

                  <!-- Find if the route start node is far from the robot's current pose; if so, connect them for 'first mile'. -->
                  <ReactiveSequence>
                    <GetCurrentPose current_pose="{current_pose}"/>
                    <GetPoseFromPath path="{route_path}" index="0" pose="{route_start_pose}"/>
                    <Inverter>
                      <ArePosesNear ref_pose="{current_pose}" target_pose="{route_start_pose}" tolerance="0.3"/>
                    </Inverter>
                    <ComputePathToPose goal="{route_start_pose}" path="{first_mile_path}" planner_id="{selected_planner}" error_code_id="{compute_path_error_code}" error_msg="{compute_path_error_msg}"/>
                    <ConcatenatePaths input_path1="{first_mile_path}" input_path2="{route_path}" output_path="{route_path}"/>
                  </ReactiveSequence>

                  <!-- Find if the route end node is far from the goal pose; if so, connect them for 'last mile'. -->
                  <ReactiveSequence>
                    <GetPoseFromPath path="{route_path}" index="-1" pose="{route_end_pose}"/>
                    <Inverter>
                      <ArePosesNear ref_pose="{goal}" target_pose="{route_end_pose}" tolerance="0.1"/>
                    </Inverter>
                    <ComputePathToPose start="{route_end_pose}" goal="{goal}" path="{last_mile_path}" planner_id="{selected_planner}" error_code_id="{compute_path_error_code}" error_msg="{compute_path_error_msg}"/>
                    <ConcatenatePaths input_path1="{route_path}" input_path2="{last_mile_path}" output_path="{route_path}"/>
                  </ReactiveSequence>

                  <!-- Smooth the completed route -->
                  <SmoothPath unsmoothed_path="{route_path}" smoothed_path="{path}" smoother_id="route_smoother" error_code_id="{smoother_error_code}" error_msg="{smoother_error_msg}"/>
                </Sequence>
              </Fallback>
            </RateController>
          <Sequence>
            <Fallback>
              <WouldARouteRecoveryHelp error_code="{compute_route_error_code}"/>
              <WouldAPlannerRecoveryHelp error_code="{compute_path_error_code}"/>
            </Fallback>
            <ClearEntireCostmap name="ClearGlobalCostmap-Context" service_name="global_costmap/clear_entirely_global_costmap"/>
          </Sequence>
        </RecoveryNode>
        <RecoveryNode number_of_retries="1" name="FollowPath">
          <FollowPath path="{path}" controller_id="{selected_controller}" error_code_id="{follow_path_error_code}" error_msg="{follow_path_error_msg}"/>
          <Sequence>
            <WouldAControllerRecoveryHelp error_code="{follow_path_error_code}"/>
            <ClearEntireCostmap name="ClearLocalCostmap-Context" service_name="local_costmap/clear_entirely_local_costmap"/>
          </Sequence>
        </RecoveryNode>
      </PipelineSequence>
      <Sequence>
        <Fallback>
          <WouldAControllerRecoveryHelp error_code="{follow_path_error_code}"/>
          <WouldAPlannerRecoveryHelp error_code="{compute_route_error_code}"/>
        </Fallback>
        <ReactiveFallback name="RecoveryFallback">
          <GoalUpdated/>
          <RoundRobin name="RecoveryActions">
            <Sequence name="ClearingActions">
              <ClearEntireCostmap name="ClearLocalCostmap-Subtree" service_name="local_costmap/clear_entirely_local_costmap"/>
              <ClearEntireCostmap name="ClearGlobalCostmap-Subtree" service_name="global_costmap/clear_entirely_global_costmap"/>
            </Sequence>
            <Wait wait_duration="5.0" error_code_id="{wait_error_code}" error_msg="{wait_error_msg}"/>
            <BackUp backup_dist="0.30" backup_speed="0.15" error_code_id="{backup_error_code}" error_msg="{backup_error_msg}"/>
          </RoundRobin>
        </ReactiveFallback>
      </Sequence>
    </RecoveryNode>
  </BehaviorTree>
</root>
