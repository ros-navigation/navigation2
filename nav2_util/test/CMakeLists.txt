ament_add_gtest(test_execution_timer test_execution_timer.cpp)
target_link_libraries(test_execution_timer ${library_name})

ament_add_gtest(test_node_utils test_node_utils.cpp)
target_link_libraries(test_node_utils ${library_name})

find_package(std_srvs REQUIRED)
find_package(test_msgs REQUIRED)

ament_add_gtest(test_service_client test_service_client.cpp)
ament_target_dependencies(test_service_client
    std_srvs
)
target_link_libraries(test_service_client ${library_name})

ament_add_gtest(test_string_utils test_string_utils.cpp)
target_link_libraries(test_string_utils ${library_name})

find_package(rclcpp_lifecycle REQUIRED)
ament_add_gtest(test_lifecycle_utils test_lifecycle_utils.cpp)
ament_target_dependencies(test_lifecycle_utils
    rclcpp_lifecycle
)
target_link_libraries(test_lifecycle_utils ${library_name})

ament_add_gtest(test_actions test_actions.cpp)
ament_target_dependencies(test_actions
    rclcpp_action
    test_msgs
)
target_link_libraries(test_actions ${library_name})

ament_add_gtest(test_lifecycle_node test_lifecycle_node.cpp)
ament_target_dependencies(test_lifecycle_node
    rclcpp_lifecycle
)
target_link_libraries(test_lifecycle_node ${library_name})

ament_add_gtest(test_lifecycle_cli_node test_lifecycle_cli_node.cpp)
ament_target_dependencies(test_lifecycle_cli_node
    rclcpp_lifecycle
)
target_link_libraries(test_lifecycle_cli_node ${library_name})

ament_add_gtest(test_geometry_utils test_geometry_utils.cpp)
ament_target_dependencies(test_geometry_utils
    geometry_msgs
)
target_link_libraries(test_geometry_utils ${library_name})

ament_add_gtest(test_odometry_utils test_odometry_utils.cpp)
ament_target_dependencies(test_odometry_utils
    nav_msgs
    geometry_msgs
)
target_link_libraries(test_odometry_utils ${library_name})

ament_add_gtest(test_robot_utils test_robot_utils.cpp)
ament_target_dependencies(test_robot_utils
    geometry_msgs
)
target_link_libraries(test_robot_utils ${library_name})

## Commented because it is not possible to be used with Humble
# ament_add_gtest(test_base_footprint_publisher test_base_footprint_publisher.cpp)
# target_include_directories(test_base_footprint_publisher PRIVATE "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>")
# ament_target_dependencies(test_base_footprint_publisher
#     geometry_msgs
#     tf2_ros
#     rclcpp
# )
# target_link_libraries(test_base_footprint_publisher ${library_name})

ament_add_gtest(test_array_parser test_array_parser.cpp)
target_link_libraries(test_array_parser ${library_name})

ament_add_gtest(test_twist_publisher test_twist_publisher.cpp)
ament_target_dependencies(test_twist_publisher
    geometry_msgs
    rclcpp
)
target_link_libraries(test_twist_publisher ${library_name})

ament_add_gtest(test_twist_subscriber test_twist_subscriber.cpp)
ament_target_dependencies(test_twist_subscriber
    geometry_msgs
    rclcpp
)
target_link_libraries(test_twist_subscriber ${library_name})

ament_add_gtest(test_validation_messages test_validation_messages.cpp)
ament_target_dependencies(test_validation_messages
    geometry_msgs
    std_msgs
    builtin_interfaces
)
target_link_libraries(test_validation_messages ${library_name})

ament_add_gtest(test_copy_all_parameter_values test_copy_all_parameter_values.cpp)
target_link_libraries(test_copy_all_parameter_values ${library_name})
